/**
 * Musite
 * Copyright (C) 2010 Digital Biology Laboratory, University Of Missouri
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package musite.ui;

import java.io.File;
import java.io.InputStream;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

import musite.Musite;
import musite.MusiteClassify;
import musite.MusiteInit;
import musite.Protein;
import musite.Proteins;

import musite.prediction.PredictionResult;
import musite.prediction.PredictionResultImpl;
import musite.prediction.PredictionModel;
import musite.prediction.PredictionModelManager;

import musite.prediction.feature.disorder.DisorderPredictorVSL2;
import musite.prediction.feature.disorder.DisorderInfoBatchReaderFromFasta;
import musite.prediction.feature.disorder.DisorderUtil;

import musite.io.fasta.ProteinsFastaReader;
import musite.io.fasta.ProteinsReaderFastaVisitor;
import musite.io.fasta.QueryProteinsReaderFastaVisitor;
import musite.io.fasta.parser.SequencePTMSiteTokenAppendedParser;
import musite.io.xml.CollectionXMLReader;
import musite.io.xml.ProteinsXMLReader;

import musite.ui.task.DisorderPredictionTask;
import musite.ui.task.ModelLoadingTask;
import musite.ui.task.MusiteClassifyTask;
import musite.ui.task.ReadTask;
import musite.ui.task.TaskUtil;
import musite.ui.util.CheckComboBox;

import musite.util.FileExtensionsFilter;
import musite.util.FilePathParser;
import musite.util.StringUtil;

/**
 *
 * @author Jianjiong Gao
 */
public class MusitePredictionPanel extends javax.swing.JPanel {

    /** Creates new form MusitePredictionPanel */
    public MusitePredictionPanel() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        javax.swing.JPanel modelSelectionPanel = new javax.swing.JPanel();
        javax.swing.JPanel modelFilePanel = new javax.swing.JPanel();
        modelFileComboBox = new javax.swing.JComboBox();
        modelPanel = new javax.swing.JPanel();
        inputTabbedPane = new javax.swing.JTabbedPane();
        seqPanel = new javax.swing.JPanel();
        javax.swing.JScrollPane seqScrollPane = new javax.swing.JScrollPane();
        seqTextArea = new javax.swing.JTextArea();
        fastaPanel = new javax.swing.JPanel();
        javax.swing.JPanel fastaFilePanel = new javax.swing.JPanel();
        fastaTextField = new javax.swing.JTextField();
        javax.swing.JButton fastaButton = new javax.swing.JButton();
        javax.swing.JScrollPane noteXMLScrollPane1 = new javax.swing.JScrollPane();
        javax.swing.JTextArea noteXMLTextArea1 = new javax.swing.JTextArea();
        javax.swing.JPanel disorderPanel = new javax.swing.JPanel();
        disordeFileTextField = new javax.swing.JTextField();
        disorderFileButton = new javax.swing.JButton();
        xmlPanel = new javax.swing.JPanel();
        javax.swing.JPanel xmlFilePanel = new javax.swing.JPanel();
        xmlTextField = new javax.swing.JTextField();
        javax.swing.JButton xmlButton = new javax.swing.JButton();
        javax.swing.JScrollPane noteXMLScrollPane = new javax.swing.JScrollPane();
        javax.swing.JTextArea noteXMLTextArea = new javax.swing.JTextArea();
        javax.swing.JPanel okPanel = new javax.swing.JPanel();
        predictButton = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(600, 310));
        setLayout(new java.awt.GridBagLayout());

        modelSelectionPanel.setLayout(new java.awt.GridBagLayout());

        modelFilePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Select a Model File"));
        modelFilePanel.setLayout(new javax.swing.BoxLayout(modelFilePanel, javax.swing.BoxLayout.LINE_AXIS));

        setModelComboBox();
        Musite.getModelManager().getPropertyChangeSupport().addPropertyChangeListener(
            new java.beans.PropertyChangeListener() {
                public void propertyChange(java.beans.PropertyChangeEvent evt) {
                    setModelComboBox();
                }
            }
        );
        modelFileComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modelFileComboBoxActionPerformed(evt);
            }
        });
        modelFilePanel.add(modelFileComboBox);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        modelSelectionPanel.add(modelFilePanel, gridBagConstraints);

        modelPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Select Model(s)"));
        modelPanel.setLayout(new javax.swing.BoxLayout(modelPanel, javax.swing.BoxLayout.LINE_AXIS));

        modelComboBox = new CheckComboBox(musite.util.CollectionUtil.getSet("Please select a model file"), true);
        modelComboBox.setShowAllAndNone(true);
        modelComboBox.setEnabled(false);
        modelComboBox.setToolTipText("Please select a model file first.");
        modelPanel.add(modelComboBox);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        modelSelectionPanel.add(modelPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        add(modelSelectionPanel, gridBagConstraints);

        inputTabbedPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Input Protein Sequences"));

        seqPanel.setLayout(new javax.swing.BoxLayout(seqPanel, javax.swing.BoxLayout.LINE_AXIS));

        seqTextArea.setFont(new java.awt.Font("Monospaced",seqTextArea.getFont().getStyle(),14));
        seqTextArea.setColumns(20);
        seqTextArea.setLineWrap(true);
        seqTextArea.setRows(5);
        seqScrollPane.setViewportView(seqTextArea);

        seqPanel.add(seqScrollPane);

        inputTabbedPane.addTab("Enter FASTA sequence(s)", seqPanel);

        fastaPanel.setLayout(new java.awt.GridBagLayout());

        fastaFilePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("FASTA file"));
        fastaFilePanel.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        fastaFilePanel.add(fastaTextField, gridBagConstraints);

        fastaButton.setText("Open");
        fastaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fastaButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        fastaFilePanel.add(fastaButton, gridBagConstraints);

        noteXMLScrollPane1.setBorder(null);
        noteXMLScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        noteXMLTextArea1.setColumns(20);
        noteXMLTextArea1.setEditable(false);
        noteXMLTextArea1.setFont(noteXMLTextArea1.getFont().deriveFont(noteXMLTextArea1.getFont().getSize()-2f));
        noteXMLTextArea1.setLineWrap(true);
        noteXMLTextArea1.setRows(5);
        noteXMLTextArea1.setText("Hint: if you selected a model using disorder features, it is recommended to predict disorder scores for the sequences in your file for future use. Please go to menu Tools => Feature Extraction => Disorder Predition (select FASTA as file format) to predict the disorder scores for your files.");
        noteXMLTextArea1.setWrapStyleWord(true);
        noteXMLTextArea1.setOpaque(false);
        noteXMLScrollPane1.setViewportView(noteXMLTextArea1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        fastaFilePanel.add(noteXMLScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        fastaPanel.add(fastaFilePanel, gridBagConstraints);

        disorderPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("File containing predicted disorder scores [optional]"));
        disorderPanel.setLayout(new java.awt.GridBagLayout());

        disordeFileTextField.setToolTipText("Please select file containing the disorder scores");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        disorderPanel.add(disordeFileTextField, gridBagConstraints);

        disorderFileButton.setText("Open");
        disorderFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disorderFileButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        disorderPanel.add(disorderFileButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        fastaPanel.add(disorderPanel, gridBagConstraints);

        inputTabbedPane.addTab("Upload FASTA File", fastaPanel);

        xmlPanel.setLayout(new java.awt.GridBagLayout());

        xmlFilePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Musite XML file"));
        xmlFilePanel.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        xmlFilePanel.add(xmlTextField, gridBagConstraints);

        xmlButton.setText("Open");
        xmlButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xmlButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        xmlFilePanel.add(xmlButton, gridBagConstraints);

        noteXMLScrollPane.setBorder(null);
        noteXMLScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        noteXMLTextArea.setColumns(20);
        noteXMLTextArea.setEditable(false);
        noteXMLTextArea.setFont(noteXMLTextArea.getFont().deriveFont(noteXMLTextArea.getFont().getSize()-2f));
        noteXMLTextArea.setLineWrap(true);
        noteXMLTextArea.setRows(5);
        noteXMLTextArea.setText("Note: if you selected a model using disorder features, it is recommended to use a Musite XML file that contains disorder scores. Please go to menu Tools => Feature Extraction => Disorder Predition to predict the disorder scores for your files.");
        noteXMLTextArea.setWrapStyleWord(true);
        noteXMLTextArea.setOpaque(false);
        noteXMLScrollPane.setViewportView(noteXMLTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        xmlFilePanel.add(noteXMLScrollPane, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        xmlPanel.add(xmlFilePanel, gridBagConstraints);

        inputTabbedPane.addTab("Upload Musite XML File", xmlPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(inputTabbedPane, gridBagConstraints);

        predictButton.setText("    Submit    ");
        predictButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                predictButtonActionPerformed(evt);
            }
        });
        okPanel.add(predictButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(okPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void predictButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_predictButtonActionPerformed
        if (!verifyInput())
            return;

        // load model
//        ModelFileWrapper mnw = (ModelFileWrapper)modelFileComboBox.getSelectedItem();
//        ModelLoadingTask modelLoadingTask = new ModelLoadingTask(mnw.file());
//        TaskUtil.execute(modelLoadingTask);
//        if (!modelLoadingTask.success()) {
//            JOptionPane.showMessageDialog(this, "Error: failed to load model.");
//            return;
//        }
//        List<PredictionModel> models = modelLoadingTask.getModel();
        Set<PredictionModel> models = selectedModel();

        if (models==null || models.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Error: empty model.");
            return;
        }

        // read proteins
        ReadTask<Proteins> proteinsReadTask;
        String panelName;
        switch(inputTabbedPane.getSelectedIndex()) {
            case 0: {
                String seq = seqTextArea.getText();
                seq = seq.trim();
                if (!seq.startsWith(">"))
                    seq = ">sequence\n"+seq;

                //seq = seq.replaceAll("[0-9\\p{Space}]", ""); // replace all digits and spaces, tabs, ...

                ProteinsReaderFastaVisitor visitor =
                        new QueryProteinsReaderFastaVisitor.Builder()
                        .sequenceParser(new  SequencePTMSiteTokenAppendedParser("?"))
                        .build();
                ProteinsFastaReader reader = new ProteinsFastaReader(visitor);
                InputStream is = StringUtil.toStream(seq);
                proteinsReadTask = new ReadTask(reader, is);
                
                Pattern p = Pattern.compile("[^\\p{Space}]+");
                Matcher m = p.matcher(seq.substring(1,seq.length()>21?21:seq.length()).trim());
                if (m.find()) {
                    panelName = m.group();
                    if (panelName.length()>20) {
                        panelName = panelName.substring(0,20)+"...";
                    }
                } else {
                    return;
                    //impossible state
                }

                break;
            }
            case 1: {
                ProteinsReaderFastaVisitor visitor =
                        new QueryProteinsReaderFastaVisitor.Builder()
                        .sequenceParser(new  SequencePTMSiteTokenAppendedParser("?"))
                        .build();
                ProteinsFastaReader reader = new ProteinsFastaReader(visitor);
                String fasta = fastaTextField.getText();
                proteinsReadTask = new ReadTask(reader, fasta);

                panelName = FilePathParser.getName(fasta);
                break;
            }
            case 2: {
                ProteinsXMLReader reader = ProteinsXMLReader.createReader(false);
                reader.putProteinFieldReader("query", CollectionXMLReader.createIntegerCollectionReader());
                reader.setFieldFilter(musite.ResidueAnnotationUtil.RESIDUE_ANNOTATION, false); // skip the residue annotations

                ProteinsXMLReader disorderReader = DisorderUtil.getDisorderXMLReader(reader);

                String xml = xmlTextField.getText();
                proteinsReadTask = new ReadTask(disorderReader, xml);

                panelName = FilePathParser.getName(xml);
                break;
            }
            default:
                return;//wrong state
        }

        TaskUtil.execute(proteinsReadTask);
        if (!proteinsReadTask.success()) {
            JOptionPane.showMessageDialog(this, "Error when reading sequences.\n");
            return;
        }

        Proteins proteins = proteinsReadTask.getResultObject();
        if (proteins==null || proteins.proteinCount()==0) {
            JOptionPane.showMessageDialog(this, "Error: no sequence was contained.\n");
            return;
        }

        Iterator<Protein> it = proteins.proteinIterator();
        boolean selectivePrediction = false;
        while (it.hasNext()) {
            Protein protein = it.next();
            Collection<Integer> sites;
            try {
                sites = (Collection)protein.getInfo("query");
            } catch(Exception e) {
                e.printStackTrace();
                continue;
            }
            if (sites!=null && !sites.isEmpty()) {
                int option = JOptionPane.showConfirmDialog(this,
                        "Some residues in your input sequences were labeled for query.\n" +
                        "Would you like to predict on these labeled sites only?");
                if (option == JOptionPane.CANCEL_OPTION) {
                    return;
                } else if (option == JOptionPane.YES_OPTION) {
                    selectivePrediction = true;
                }
                break;
            }
        }

        // classify         
        boolean useDisorder = false;
        for (PredictionModel  model : models) {
            if (model.getModelProperties()
                    .getProperty(MusiteInit.TRAINING_PROPS_USE_DISORDER_FEATURES)
                    .equalsIgnoreCase("true")) {
                useDisorder = true;
                break;
            }
        }

        // integrate disorder if used
        if (useDisorder) {
            boolean predict = true;
            if (inputTabbedPane.getSelectedIndex()==1) {
                String dis = disordeFileTextField.getText();
                if (dis!=null && dis.length()>0) {
                    DisorderInfoBatchReaderFromFasta reader
                            = new DisorderInfoBatchReaderFromFasta();
                    ReadTask<Map<String,List<Double>>> readTask
                            = new ReadTask(reader, dis);
                    TaskUtil.execute(readTask);
                    if (!readTask.success()) {
                        JOptionPane.showMessageDialog(this, "Failed to read disorder");
                        return;
                    }

                    Map<String,List<Double>> mapDis = readTask.getResultObject();
                    DisorderUtil.integrateDisorder(proteins, mapDis);
                    predict = false;
                }
            }

            if (predict) {
                String dirVSL2 = MusiteInit.globalProps.getProperty(MusiteInit.GLOBAL_PROP_VSL2_FILE);
                DisorderPredictorVSL2 disorderPredictor = new DisorderPredictorVSL2(dirVSL2);
                DisorderPredictionTask disTask = new DisorderPredictionTask(proteins, disorderPredictor);
                TaskUtil.execute(disTask);
                if (!disTask.success()) {
                    JOptionPane.showMessageDialog(this, "Error: failed to predict disorder.");
                    return;
                }
                DisorderUtil.integrateDisorder(proteins, disTask.getDisorder());
            }
        }

        // Execute Task in New Thread; pop open JTask Dialog Box.
        PredictionResult result = new PredictionResultImpl();
        MusiteClassify classify = new MusiteClassify(result);
        int jobSize = 50;
        classify.setJobSize(jobSize);
        classify.setSelectivePrediction(selectivePrediction);

        for (PredictionModel model : models) {
            MusiteClassifyTask classifyTask = new MusiteClassifyTask(model, proteins, classify);
            TaskUtil.execute(classifyTask);

            if (!classifyTask.success()) {
                JOptionPane.showMessageDialog(this, "Failed to classify using model "
                            +model.getName());
            }
        }

        if (result.getModels().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Failed to predict.");
            return;
        }

        // add result panel
        MusiteResultPanel resultPanel
                = new MusiteResultPanel(panelName, result);
        Musite.getDesktop().addResultPanel(resultPanel);
    }//GEN-LAST:event_predictButtonActionPerformed

    private void fastaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fastaButtonActionPerformed
        JFileChooser fc = new JFileChooser(MusiteInit.defaultPath);
        ArrayList<String> exts = new ArrayList<String>(1);
        String ext = "fasta";
        exts.add(ext);
        fc.setFileFilter(new FileExtensionsFilter(exts,"Fasta file (.fasta)"));
        //fc.setAcceptAllFileFilterUsed(true);
        fc.setDialogTitle("Select a Fasta file...");
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            String filePath = file.getParent() + File.separator + file.getName();
            fastaTextField.setText(filePath);
            MusiteInit.defaultPath = file.getParent();
        }
}//GEN-LAST:event_fastaButtonActionPerformed

    private void disorderFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disorderFileButtonActionPerformed
        JFileChooser fc = new JFileChooser(MusiteInit.defaultPath);
        ArrayList<String> exts = new ArrayList<String>(1);
        String ext = "disorder";
        exts.add(ext);
        fc.setFileFilter(new FileExtensionsFilter(exts,"Fasta file (.fasta)"));
        //fc.setAcceptAllFileFilterUsed(true);
        fc.setDialogTitle("Select a disorder file...");
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            MusiteInit.defaultPath = file.getParent();

            String filePath = MusiteInit.defaultPath + File.separator + file.getName();
            disordeFileTextField.setText(filePath);
        }
}//GEN-LAST:event_disorderFileButtonActionPerformed

    private void xmlButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xmlButtonActionPerformed
        JFileChooser fc = new JFileChooser(MusiteInit.defaultPath);
        ArrayList<String> exts = new ArrayList<String>(1);
        String ext = "xml";
        exts.add(ext);
        fc.setFileFilter(new FileExtensionsFilter(exts,"XML file (.xml)"));

        //fc.setAcceptAllFileFilterUsed(true);
        fc.setDialogTitle("Select a Musite file...");
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            String filePath = file.getParent() + File.separator + file.getName();
            xmlTextField.setText(filePath);
            MusiteInit.defaultPath = file.getParent();
        }
    }//GEN-LAST:event_xmlButtonActionPerformed

    private void modelFileComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modelFileComboBoxActionPerformed
        Object obj = modelFileComboBox.getSelectedItem();
        if (!(obj instanceof ModelFileWrapper)) {
            modelComboBox.setObjs(musite.util.CollectionUtil.getSet("Please select a model file"), true);
            modelComboBox.setEnabled(false);
            modelComboBox.setToolTipText("Please select a model file first.");
        } else {
            String file = ((ModelFileWrapper)obj).file();
            ModelLoadingTask task = new ModelLoadingTask(file);
            TaskUtil.execute(task);
            if (!task.success()) {
                JOptionPane.showMessageDialog(this, "Failed to load model: "+file);
                return;
            }

            List<PredictionModel> models = task.getModel();

            if (models==null || models.size()==0) {
                JOptionPane.showMessageDialog(this, "No model is contained in "+file);
                return;
            }

            modelComboBox.setObjs(models, true);

            if (models.size()==1) {
                modelComboBox.setEnabled(false);
                modelComboBox.setToolTipText("Only one model is contained in the selected file. It was automatically selected.");
            } else {
                modelComboBox.setEnabled(true);
            }
        }
    }//GEN-LAST:event_modelFileComboBoxActionPerformed

    public String getSelectedModel() {
        // load model
        Object obj = modelFileComboBox.getSelectedItem();
        if (obj==null)
            return null;

        if (modelFileComboBox.getSelectedIndex()==0)
            return null;

        return (String)obj;
    }

    public void setModelComboBox() {
        PredictionModelManager manager = Musite.getModelManager();
        Vector items = new Vector(manager.modelFileCount()+1);
        items.add("Please select a trained model");
        for (String file : new TreeSet<String>(manager.modelFiles())) {
            items.add(new ModelFileWrapper(file));
        }

        Object selected = modelFileComboBox.getSelectedItem();
        modelFileComboBox.setModel(new javax.swing.DefaultComboBoxModel(items));
        if (selected instanceof ModelFileWrapper && selected!=null)
            modelFileComboBox.setSelectedItem((ModelFileWrapper)selected);
    }

    private Set<PredictionModel> selectedModel() {
        Set<PredictionModel> models = new HashSet(modelComboBox.getSelectedItems());
        return models;
    }

    private boolean verifyInput() {
        if (modelFileComboBox.getSelectedIndex()<1) {
            JOptionPane.showMessageDialog(this, "Error: no model file was selected." +
                    "\nPlease select one.");
            return false;
        }

        if (selectedModel().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Error: no model was selected." +
                    "\nPlease select one.");
            return false;
        }

        switch (inputTabbedPane.getSelectedIndex()) {
            case 0: //sequence
                String seq = seqTextArea.getText();
                if (seq==null || seq.length()==0) {
                    JOptionPane.showMessageDialog(this, "Error: the protein sequence cannot be empty.");
                    return false;
                }
                break;
            case 1: //fasta
                String fasta = fastaTextField.getText();
                if (fasta==null || fasta.length()==0) {
                    JOptionPane.showMessageDialog(this, "Error: the fasta file name cannot be empty.");
                    return false;
                }

                if (!musite.util.IOUtil.fileExist(fasta)) {
                    JOptionPane.showMessageDialog(this, "Error: the fasta file does not exist.");
                    return false;
                }

                String dis = this.disordeFileTextField.getText();

                if (dis!=null && dis.length()!=0 && !musite.util.IOUtil.fileExist(dis)) {
                    JOptionPane.showMessageDialog(this, "Error: the disorder file does not exist.");
                    return false;
                }
                break;
            case 2: // xml
                String xml = xmlTextField.getText();
                if (xml==null || xml.length()==0) {
                    JOptionPane.showMessageDialog(this, "Error: the xml file name cannot be empty.");
                    return false;
                }

                if (!musite.util.IOUtil.fileExist(xml)) {
                    JOptionPane.showMessageDialog(this, "Error: the xml file does not exist.");
                    return false;
                }
                break;
            default:
                return false;
        }

        return true;
    }

    private CheckComboBox modelComboBox;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField disordeFileTextField;
    private javax.swing.JButton disorderFileButton;
    private javax.swing.JPanel fastaPanel;
    private javax.swing.JTextField fastaTextField;
    private javax.swing.JTabbedPane inputTabbedPane;
    private javax.swing.JComboBox modelFileComboBox;
    private javax.swing.JPanel modelPanel;
    private javax.swing.JButton predictButton;
    private javax.swing.JPanel seqPanel;
    private javax.swing.JTextArea seqTextArea;
    private javax.swing.JPanel xmlPanel;
    private javax.swing.JTextField xmlTextField;
    // End of variables declaration//GEN-END:variables

}
