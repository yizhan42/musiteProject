/**
 * Musite
 * Copyright (C) 2010 Digital Biology Laboratory, University Of Missouri
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package musite.ui;

import java.io.File;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

import musite.MusiteInit;
import musite.PTM;
import musite.Protein;
import musite.Proteins;
import musite.Proteins.ProteinFilter;
import musite.Proteins.ProteinVisitor;
import musite.PTMAnnotationUtil;
import musite.ResidueAnnotationUtil;

import musite.io.xml.ProteinsXMLReader;
import musite.io.xml.ProteinsXMLWriter;

import musite.ui.task.ReadTask;
import musite.ui.task.WriteTask;
import musite.ui.task.TaskUtil;

import musite.util.FileExtensionsFilter;
import musite.util.FilePathParser;

/**
 *
 * @author Jianjiong Gao
 */
public class ProteinsFilterDialog extends javax.swing.JDialog {

    /** Creates new form Fasta2XmlDialog */
    public ProteinsFilterDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        javax.swing.ButtonGroup speciesbuttonGroup = new javax.swing.ButtonGroup();
        phosphoButtonGroup = new javax.swing.ButtonGroup();
        buttonGroup1 = new javax.swing.ButtonGroup();
        javax.swing.JPanel originalPanel = new javax.swing.JPanel();
        javax.swing.JPanel originalFilePanel = new javax.swing.JPanel();
        originalFileTextField = new javax.swing.JTextField();
        javax.swing.JButton originalFileButton = new javax.swing.JButton();
        javax.swing.JPanel targetPanel = new javax.swing.JPanel();
        javax.swing.JPanel targetFilePanel = new javax.swing.JPanel();
        targetFileTextField = new javax.swing.JTextField();
        javax.swing.JButton targetFileButton = new javax.swing.JButton();
        javax.swing.JPanel OKPanel = new javax.swing.JPanel();
        OKBtn = new javax.swing.JButton();
        javax.swing.JButton cancelBtn = new javax.swing.JButton();
        javax.swing.JPanel filterPanel = new javax.swing.JPanel();
        accessionCheckBox = new javax.swing.JCheckBox();
        accessionPanel = new javax.swing.JPanel();
        javax.swing.JPanel accessionIncludePanel = new javax.swing.JPanel();
        accessionIncludeRadioButton = new javax.swing.JRadioButton();
        accessionExcludeRadioButton = new javax.swing.JRadioButton();
        javax.swing.JScrollPane accessionScrollPane = new javax.swing.JScrollPane();
        accessionTextArea = new javax.swing.JTextArea();
        speciesCheckBox = new javax.swing.JCheckBox();
        speciesPanel = new javax.swing.JPanel();
        javax.swing.JPanel speciesIncludePanel = new javax.swing.JPanel();
        speciesIncludeRadioButton = new javax.swing.JRadioButton();
        speciesExcludeRadioButton = new javax.swing.JRadioButton();
        javax.swing.JScrollPane speciesScrollPane = new javax.swing.JScrollPane();
        speciesTextArea = new javax.swing.JTextArea();
        phosphoCheckBox = new javax.swing.JCheckBox();
        phosphoPanel = new javax.swing.JPanel();
        phosphoRadioButton = new javax.swing.JRadioButton();
        nonphosphoRadioButton = new javax.swing.JRadioButton();
        ptmStatusCheckBox = new javax.swing.JCheckBox();
        ptmStatusPanel = new javax.swing.JPanel();
        statusExpCheckBox = new javax.swing.JCheckBox();
        statusSimCheckBox = new javax.swing.JCheckBox();
        statusProbCheckBox = new javax.swing.JCheckBox();
        statusPotenCheckBox = new javax.swing.JCheckBox();
        rmvInfoCheckBox = new javax.swing.JCheckBox();
        rmvFieldPanel = new javax.swing.JPanel();
        rmvSeqCheckBox = new javax.swing.JCheckBox();
        rmvAnnotationCheckBox = new javax.swing.JCheckBox();
        rmvDisorderCheckBox = new javax.swing.JCheckBox();
        rmvOtherCheckBox = new javax.swing.JCheckBox();
        rmvOtherTextField = new javax.swing.JTextField();
        javax.swing.JPanel kinasePanel = new javax.swing.JPanel();
        kinaseCheckBox = new javax.swing.JCheckBox();
        kinaseTextField = new javax.swing.JTextField();
        javax.swing.JPanel randomSelectPanel = new javax.swing.JPanel();
        randomSelectCheckBox = new javax.swing.JCheckBox();
        randomSelectTextField = new javax.swing.JTextField();
        javax.swing.JLabel randomSelectProteinLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Filter proteins");
        getContentPane().setLayout(new java.awt.GridBagLayout());

        originalPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Original Musite XML file"));
        originalPanel.setLayout(new java.awt.GridBagLayout());

        originalFilePanel.setLayout(new java.awt.GridBagLayout());

        originalFileTextField.setToolTipText("Please select a FASTA training file");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        originalFilePanel.add(originalFileTextField, gridBagConstraints);

        originalFileButton.setText("Open");
        originalFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                originalFileButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        originalFilePanel.add(originalFileButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        originalPanel.add(originalFilePanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(originalPanel, gridBagConstraints);

        targetPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Save to Musite XML file"));
        targetPanel.setMinimumSize(new java.awt.Dimension(400, 63));
        targetPanel.setPreferredSize(new java.awt.Dimension(500, 63));
        targetPanel.setLayout(new java.awt.GridBagLayout());

        targetFilePanel.setLayout(new java.awt.GridBagLayout());

        targetFileTextField.setToolTipText("Please select a FASTA training file");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        targetFilePanel.add(targetFileTextField, gridBagConstraints);

        targetFileButton.setText("Open");
        targetFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                targetFileButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        targetFilePanel.add(targetFileButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        targetPanel.add(targetFilePanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(targetPanel, gridBagConstraints);

        OKBtn.setText("   OK   ");
        OKBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OKBtnActionPerformed(evt);
            }
        });
        OKPanel.add(OKBtn);

        cancelBtn.setText("Cancel");
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });
        OKPanel.add(cancelBtn);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(OKPanel, gridBagConstraints);

        filterPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Filters"));
        filterPanel.setLayout(new java.awt.GridBagLayout());

        accessionCheckBox.setText("Filter by accessions");
        accessionCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accessionCheckBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        filterPanel.add(accessionCheckBox, gridBagConstraints);

        accessionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Accessions"));
        accessionPanel.setVisible(false);
        accessionPanel.setLayout(new java.awt.GridBagLayout());

        accessionIncludePanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        buttonGroup1.add(accessionIncludeRadioButton);
        accessionIncludeRadioButton.setSelected(true);
        accessionIncludeRadioButton.setText("Include");
        accessionIncludePanel.add(accessionIncludeRadioButton);

        buttonGroup1.add(accessionExcludeRadioButton);
        accessionExcludeRadioButton.setText("Exclude");
        accessionIncludePanel.add(accessionExcludeRadioButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        accessionPanel.add(accessionIncludePanel, gridBagConstraints);

        accessionTextArea.setColumns(20);
        accessionTextArea.setRows(5);
        accessionScrollPane.setViewportView(accessionTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        accessionPanel.add(accessionScrollPane, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        filterPanel.add(accessionPanel, gridBagConstraints);

        speciesCheckBox.setText("Filter by organisms");
        speciesCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                speciesCheckBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        filterPanel.add(speciesCheckBox, gridBagConstraints);

        speciesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Organisms"));
        speciesPanel.setVisible(false);
        speciesPanel.setLayout(new java.awt.GridBagLayout());

        speciesIncludePanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        speciesbuttonGroup.add(speciesIncludeRadioButton);
        speciesIncludeRadioButton.setSelected(true);
        speciesIncludeRadioButton.setText("Include");
        speciesIncludePanel.add(speciesIncludeRadioButton);

        speciesbuttonGroup.add(speciesExcludeRadioButton);
        speciesExcludeRadioButton.setText("Exclude");
        speciesIncludePanel.add(speciesExcludeRadioButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        speciesPanel.add(speciesIncludePanel, gridBagConstraints);

        speciesTextArea.setColumns(20);
        speciesTextArea.setRows(5);
        speciesScrollPane.setViewportView(speciesTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        speciesPanel.add(speciesScrollPane, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        filterPanel.add(speciesPanel, gridBagConstraints);

        phosphoCheckBox.setText("Filter by phosphorylation");
        phosphoCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                phosphoCheckBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        filterPanel.add(phosphoCheckBox, gridBagConstraints);

        phosphoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Phospho or non-phopho"));
        phosphoPanel.setVisible(false);
        phosphoPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 3));

        phosphoButtonGroup.add(phosphoRadioButton);
        phosphoRadioButton.setSelected(true);
        phosphoRadioButton.setText("Phosphoproteins only");
        phosphoPanel.add(phosphoRadioButton);

        phosphoButtonGroup.add(nonphosphoRadioButton);
        nonphosphoRadioButton.setText("Nonphosphoproteins only");
        phosphoPanel.add(nonphosphoRadioButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        filterPanel.add(phosphoPanel, gridBagConstraints);

        ptmStatusCheckBox.setText("Filter by by phospho-annotation status (for data from UniProt)");
        ptmStatusCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ptmStatusCheckBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        filterPanel.add(ptmStatusCheckBox, gridBagConstraints);

        ptmStatusPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Phospho-annotation status"));
        ptmStatusPanel.setVisible(false);
        ptmStatusPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 3));

        statusExpCheckBox.setSelected(true);
        statusExpCheckBox.setText("Experimental");
        ptmStatusPanel.add(statusExpCheckBox);

        statusSimCheckBox.setText("By similarity");
        ptmStatusPanel.add(statusSimCheckBox);

        statusProbCheckBox.setText("Probable");
        ptmStatusPanel.add(statusProbCheckBox);

        statusPotenCheckBox.setText("Potential");
        ptmStatusPanel.add(statusPotenCheckBox);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        filterPanel.add(ptmStatusPanel, gridBagConstraints);

        rmvInfoCheckBox.setText("Remove informations in the proteins");
        rmvInfoCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rmvInfoCheckBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        filterPanel.add(rmvInfoCheckBox, gridBagConstraints);

        rmvFieldPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Protein information to be removed"));
        rmvFieldPanel.setVisible(false);
        rmvFieldPanel.setLayout(new java.awt.GridBagLayout());

        rmvSeqCheckBox.setText("Sequence");
        rmvFieldPanel.add(rmvSeqCheckBox, new java.awt.GridBagConstraints());

        rmvAnnotationCheckBox.setText("Residue annotation");
        rmvFieldPanel.add(rmvAnnotationCheckBox, new java.awt.GridBagConstraints());

        rmvDisorderCheckBox.setText("Disorder");
        rmvFieldPanel.add(rmvDisorderCheckBox, new java.awt.GridBagConstraints());

        rmvOtherCheckBox.setText("Other:");
        rmvFieldPanel.add(rmvOtherCheckBox, new java.awt.GridBagConstraints());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        rmvFieldPanel.add(rmvOtherTextField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        filterPanel.add(rmvFieldPanel, gridBagConstraints);

        kinasePanel.setLayout(new java.awt.GridBagLayout());

        kinaseCheckBox.setText("Filter sites by kinase:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
        kinasePanel.add(kinaseCheckBox, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
        kinasePanel.add(kinaseTextField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        filterPanel.add(kinasePanel, gridBagConstraints);

        randomSelectPanel.setLayout(new java.awt.GridBagLayout());

        randomSelectCheckBox.setText("Randomly select");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
        randomSelectPanel.add(randomSelectCheckBox, gridBagConstraints);

        randomSelectTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        randomSelectTextField.setText("100");
        randomSelectTextField.setMinimumSize(new java.awt.Dimension(60, 19));
        randomSelectTextField.setPreferredSize(new java.awt.Dimension(60, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
        randomSelectPanel.add(randomSelectTextField, gridBagConstraints);

        randomSelectProteinLabel.setText("proteins");
        randomSelectPanel.add(randomSelectProteinLabel, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        filterPanel.add(randomSelectPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(filterPanel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void originalFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_originalFileButtonActionPerformed
        JFileChooser fc = new JFileChooser(MusiteInit.defaultPath);
        ArrayList<String> exts = new ArrayList<String>(1);
        String ext = "xml";
        exts.add(ext);
        fc.setFileFilter(new FileExtensionsFilter(exts,"XML file (.xml)"));
        
        //fc.setAcceptAllFileFilterUsed(true);
        fc.setDialogTitle("Select a Musite XML file...");
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            MusiteInit.defaultPath = file.getParent();

            String filePath = MusiteInit.defaultPath + File.separator + file.getName();
            originalFileTextField.setText(filePath);

            String fileName = FilePathParser.getName(filePath);
            String saveTo = MusiteInit.defaultPath+File.separator+fileName+".filtered.xml";
            targetFileTextField.setText(saveTo);
        }
}//GEN-LAST:event_originalFileButtonActionPerformed

    private void targetFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_targetFileButtonActionPerformed
        JFileChooser fc;
        String defFile = targetFileTextField.getText();
        if (defFile.length()>0) {
            fc = new JFileChooser(FilePathParser.getDir(defFile));
        } else {
            fc = new JFileChooser(MusiteInit.defaultPath);
        }

        String ext = "xml";
        fc.setSelectedFile(new File(defFile));
        ArrayList<String> exts = new ArrayList<String>(1);
        exts.add(ext);
        fc.setFileFilter(new FileExtensionsFilter(exts,"XML file (.xml)"));
        //fc.setAcceptAllFileFilterUsed(true);
        fc.setDialogTitle("Save to...");
        int returnVal = fc.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            MusiteInit.defaultPath = file.getParent();

            String filePath = MusiteInit.defaultPath + File.separator + file.getName();
            targetFileTextField.setText(filePath);
        }
    }//GEN-LAST:event_targetFileButtonActionPerformed

    private void OKBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OKBtnActionPerformed
        String dirOriginal = originalFileTextField.getText();
        if (dirOriginal.length()==0) {
            JOptionPane.showMessageDialog(this, "Error: specify a file containing the protein sequences.");
            return;
        }

        String dirXml = targetFileTextField.getText();
        if (dirXml.length()==0) {
            JOptionPane.showMessageDialog(this, "Error: specify the xml file to save.");
            return;
        }

        boolean accessionFilter = accessionCheckBox.isSelected();
        if (accessionFilter && accessionTextArea.getText().length()==0) {
            JOptionPane.showMessageDialog(this, "Error: no accession was specified.");
            return;
        }

        boolean speciesFilter = speciesCheckBox.isSelected();
        if (speciesFilter && speciesTextArea.getText().length()==0) {
            JOptionPane.showMessageDialog(this, "Error: no species was specified.");
            return;
        }

        boolean kinaseFilter = kinaseCheckBox.isSelected();
        if (kinaseFilter && kinaseTextField.getText().length()==0) {
            JOptionPane.showMessageDialog(this, "Error: no kianse was specified.");
            return;
        }

        boolean statusFilter = ptmStatusCheckBox.isSelected();
        if (statusFilter) {
            if (statusExpCheckBox.isSelected() && statusSimCheckBox.isSelected()
                    && !statusProbCheckBox.isSelected() && !statusPotenCheckBox.isSelected()) {
                JOptionPane.showMessageDialog(this, "Error: at least select one status.");
                return;
            }
        }

        boolean randomSelectFilter = randomSelectCheckBox.isSelected();
        int nSelect = 0;
        if (randomSelectFilter) {
            if (randomSelectTextField.getText().length()==0) {
                JOptionPane.showMessageDialog(this, "Error: please select number of protein to select.");
                return;
            }

            try {
                nSelect = Integer.parseInt(randomSelectTextField.getText());
            } catch (java.lang.NumberFormatException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error: please select a positive number of protein to select.");
                return;
            }

            if (nSelect<=0) {
                JOptionPane.showMessageDialog(this, "Error: please select a positive number of protein to select.");
                return;
            }
        }

        if (musite.util.IOUtil.fileExist(dirXml)) {
            int ret = JOptionPane.showConfirmDialog(this, "Are you sure to replace the existing xml file?",
                    null, JOptionPane.YES_NO_OPTION);
            if (ret==JOptionPane.NO_OPTION) {
                return;
            }
        }

        //Reading phospho data
        ProteinsXMLReader reader = ProteinsXMLReader.createReader();

        ReadTask<Proteins> readTask = new ReadTask(reader, dirOriginal);
        TaskUtil.execute(readTask);
        if (!readTask.success()) {
            JOptionPane.showMessageDialog(this, "Failed to read the original file");
            return;
        }
        Proteins proteins = readTask.getResultObject();

        // accession filter
        if (accessionFilter) {
            final boolean accessionInclude = accessionIncludeRadioButton.isSelected();
            final HashSet accessions = new HashSet(Arrays.asList(accessionTextArea.getText().split("\n")));
            if (accessionInclude) {
                proteins.retainProteins(accessions);
            } else {
                proteins.removeProteins(accessions);
            }
        }

        // species filter
        if (speciesFilter) {
            final boolean speciesInclude = speciesIncludeRadioButton.isSelected();
            final HashSet species = new HashSet(Arrays.asList(speciesTextArea.getText().split("\n")));
            ProteinFilter filter = new ProteinFilter() {
                public boolean filter(Protein protein) {
                    String sp = protein.getOrganism();
                    if (sp==null) {
                        return !speciesInclude;
                    }

                    return species.contains(sp)==speciesInclude;
                }
            };
            proteins.filterProteins(filter);
        }

        // remove sites
        if (rmvInfoCheckBox.isSelected()) {
            final Set<String> fieldsToRemove = new HashSet();
            if (this.rmvAnnotationCheckBox.isSelected())
                fieldsToRemove.add(ResidueAnnotationUtil.RESIDUE_ANNOTATION);
            if (this.rmvSeqCheckBox.isSelected())
                fieldsToRemove.add(Protein.SEQUENCE);
            if (this.rmvDisorderCheckBox.isSelected())
                fieldsToRemove.add(musite.prediction.feature.disorder.DisorderUtil.DISORDER);
            if (this.rmvOtherCheckBox.isSelected())
                fieldsToRemove.add(this.rmvOtherTextField.getText());
            proteins.travelProteins(new ProteinVisitor() {
                public void visit(Protein protein) {
                    //PTMAnnotationUtil.removePTMAnnotation(protein, PTM.PHOSPHORYLATION);
                    for (String field : fieldsToRemove)
                        protein.removeInfo(field);
                }
            });
        }

        // kinase filter
        if (kinaseFilter) {
            String text = kinaseTextField.getText();
            String[] strs = text.split(";");
            final Set<String> kinases = new HashSet();
            for (String str : strs) {
                kinases.add(str.trim());
            }

            proteins.travelProteins(new ProteinVisitor() {
                public void visit(Protein protein) {
                    PTMAnnotationUtil.removePTMAnnotation(protein, PTM.PHOSPHORYLATION,
                            PTMAnnotationUtil.createEnzymesFilter(kinases, false));
                }
            });
        }

        // phospho filter
        if (phosphoCheckBox.isSelected()) {
            final boolean phospho = this.phosphoRadioButton.isSelected();
            ProteinFilter filter = new ProteinFilter() {
                public boolean filter(Protein protein) {
                    Set<Integer> sites = PTMAnnotationUtil.getSites(protein, PTM.PHOSPHORYLATION);
                    boolean p = sites!=null && !sites.isEmpty();

                    return phospho == p;
                }
            };
            proteins.filterProteins(filter);
        }

        // status filter
        if (statusFilter) {
            final Set<String> stats = new HashSet();
            if (this.statusExpCheckBox.isSelected())
                stats.add(null);
            if (this.statusSimCheckBox.isSelected())
                stats.add("By similarity");
            if (this.statusProbCheckBox.isSelected())
                stats.add("Probable");
            if (this.statusPotenCheckBox.isSelected())
                stats.add("Potential");

            proteins.travelProteins(new ProteinVisitor() {
                public void visit(Protein protein) {
                    PTMAnnotationUtil.removePTMAnnotation(protein, PTM.PHOSPHORYLATION,
                            ResidueAnnotationUtil.createAnnotationFilter("status", stats, false));
                }
            });
        }

        if (randomSelectFilter) {
            List<String> proteinNames = new ArrayList(proteins.getProteinsAccessions());
            if (nSelect>proteinNames.size()) {
                JOptionPane.showMessageDialog(this, "There are only "+proteinNames.size()+".\nPlease select less.");
                return;
            }

            List<String> selectPro = musite.util.SamplingUtil.resampleWithoutReplacement(proteinNames, nSelect);

            proteins.retainProteins(new HashSet(selectPro));
        }

        //Write to xml file
        ProteinsXMLWriter writer = ProteinsXMLWriter.createWriter();
        WriteTask xmlWriteTask = new WriteTask(proteins, writer, dirXml);
        TaskUtil.execute(xmlWriteTask);
        if (!readTask.success()) {
            JOptionPane.showMessageDialog(this, "Failed to write the xml file");
            return;
        }

        JOptionPane.showMessageDialog(this, "Done.");
        
        this.setVisible(false);
        this.dispose();
}//GEN-LAST:event_OKBtnActionPerformed

    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
        setVisible(false);
        dispose();
}//GEN-LAST:event_cancelBtnActionPerformed

    private void speciesCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_speciesCheckBoxActionPerformed
        speciesPanel.setVisible(speciesCheckBox.isSelected());
        this.pack();
    }//GEN-LAST:event_speciesCheckBoxActionPerformed

    private void accessionCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accessionCheckBoxActionPerformed
        accessionPanel.setVisible(accessionCheckBox.isSelected());
        this.pack();
}//GEN-LAST:event_accessionCheckBoxActionPerformed

    private void phosphoCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_phosphoCheckBoxActionPerformed
        phosphoPanel.setVisible(phosphoCheckBox.isSelected());
        this.pack();
}//GEN-LAST:event_phosphoCheckBoxActionPerformed

    private void ptmStatusCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ptmStatusCheckBoxActionPerformed
        ptmStatusPanel.setVisible(ptmStatusCheckBox.isSelected());
        this.pack();
}//GEN-LAST:event_ptmStatusCheckBoxActionPerformed

    private void rmvInfoCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rmvInfoCheckBoxActionPerformed
        rmvFieldPanel.setVisible(rmvInfoCheckBox.isSelected());
        this.pack();
}//GEN-LAST:event_rmvInfoCheckBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton OKBtn;
    private javax.swing.JCheckBox accessionCheckBox;
    private javax.swing.JRadioButton accessionExcludeRadioButton;
    private javax.swing.JRadioButton accessionIncludeRadioButton;
    private javax.swing.JPanel accessionPanel;
    private javax.swing.JTextArea accessionTextArea;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox kinaseCheckBox;
    private javax.swing.JTextField kinaseTextField;
    private javax.swing.JRadioButton nonphosphoRadioButton;
    private javax.swing.JTextField originalFileTextField;
    private javax.swing.ButtonGroup phosphoButtonGroup;
    private javax.swing.JCheckBox phosphoCheckBox;
    private javax.swing.JPanel phosphoPanel;
    private javax.swing.JRadioButton phosphoRadioButton;
    private javax.swing.JCheckBox ptmStatusCheckBox;
    private javax.swing.JPanel ptmStatusPanel;
    private javax.swing.JCheckBox randomSelectCheckBox;
    private javax.swing.JTextField randomSelectTextField;
    private javax.swing.JCheckBox rmvAnnotationCheckBox;
    private javax.swing.JCheckBox rmvDisorderCheckBox;
    private javax.swing.JPanel rmvFieldPanel;
    private javax.swing.JCheckBox rmvInfoCheckBox;
    private javax.swing.JCheckBox rmvOtherCheckBox;
    private javax.swing.JTextField rmvOtherTextField;
    private javax.swing.JCheckBox rmvSeqCheckBox;
    private javax.swing.JCheckBox speciesCheckBox;
    private javax.swing.JRadioButton speciesExcludeRadioButton;
    private javax.swing.JRadioButton speciesIncludeRadioButton;
    private javax.swing.JPanel speciesPanel;
    private javax.swing.JTextArea speciesTextArea;
    private javax.swing.JCheckBox statusExpCheckBox;
    private javax.swing.JCheckBox statusPotenCheckBox;
    private javax.swing.JCheckBox statusProbCheckBox;
    private javax.swing.JCheckBox statusSimCheckBox;
    private javax.swing.JTextField targetFileTextField;
    // End of variables declaration//GEN-END:variables

}
